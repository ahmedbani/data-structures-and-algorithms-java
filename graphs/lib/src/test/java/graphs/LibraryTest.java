/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graphs;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    Library lib;
    @Test void graphArrayListTest() {
        Graph graph = new Graph();
        Node n1 = new Node("A");
        Node n2 = new Node("B");
        Node n3 = new Node("C");
        Node n4 = new Node("D");

        assertEquals("[]", graph.graphList.toString());
        graph.addNode(n1);
        assertTrue(graph.graphList.contains(n1)); //check if the node is inside the list
        graph.addNode(n2);
        assertTrue(graph.graphList.contains(n2)); //checking the second one if it is inside the array as well
        graph.addNode(n3);
        graph.addNode(n4);

        assertEquals("[A, B, C, D]", graph.toString()); //this will check if the getNodes works correctly

        assertEquals(4, graph.size()); //this will check if the size method works correctly
    }
    @Test void graphBreadthFirstTest() {
        Graph graph = new Graph();
        Node n1 = new Node("A");
        Node n2 = new Node("B");
        Node n3 = new Node("C");
        Node n4 = new Node("D");

        graph.addNode(n1);
        graph.addNode(n2);
        graph.addNode(n3);
        graph.addNode(n4);

        assertEquals("[A]", graph.breadthFirst(n1).toString());
        graph.addEdge(n1, n2);
        assertEquals("[A, B]", graph.breadthFirst(n1).toString());
        graph.addEdge(n1, n3);
        assertEquals("[A, B, C]", graph.breadthFirst(n1).toString());
        graph.addEdge(n1, n4);
        assertEquals("[A, B, C, D]", graph.breadthFirst(n1).toString());
        assertEquals("[B, C, D]", graph.breadthFirst(n2).toString());
        assertEquals("[C, D]", graph.breadthFirst(n3).toString());
        assertEquals("[D]", graph.breadthFirst(n4).toString());
    }
    @Test void testTrip(){
        Graph graph = new Graph();
        Node n1 = new Node("Pandora");
        Node n2 = new Node("Arendelle");
        Node n3 = new Node("Metroville");
        Node n4 = new Node("Monstropolis");
        Node n5 = new Node("Naboo");
        Node n6 = new Node("Narnia");

        graph.addNode(n1);
        graph.addNode(n2);
        graph.addNode(n3);
        graph.addNode(n4);
        graph.addNode(n5);
        graph.addNode(n6);

        graph.addEdge(n1,n2,150);
        graph.addEdge(n1,n3,82);
        graph.addEdge(n2,n3,99);
        graph.addEdge(n2,n4,42);
        graph.addEdge(n4,n3,105);
        graph.addEdge(n4,n5,73);
        graph.addEdge(n5,n3,26);
        graph.addEdge(n5,n6,250);
        graph.addEdge(n3,n6,37);

        String [] cities = {"Arendelle","Monstropolis","Naboo"};
        String [] cities1 = {"Pandora","Naboo"};
        assertEquals("False, $0",lib.businessTrip(graph,cities1));
        assertEquals("True, $115",lib.businessTrip(graph,cities));
    }
    @Test void DFS(){
        Graph<String> graph = new Graph<>();

        Node a = new Node("A");
        Node b =  new Node("B");
        Node c = new Node("C");
        Node d = new Node("D");
        Node e = new Node("E");
        Node f = new Node("F");
        Node g = new Node("G");
        Node h = new Node("H");

        graph.addNode(a);
        graph.addNode(b);
        graph.addNode(c);
        graph.addNode(d);
        graph.addNode(e);
        graph.addNode(f);
        graph.addNode(g);
        graph.addNode(h);

        graph.addEdge(a,b);
        graph.addEdge(a,d);
        graph.addEdge(b,c);
        graph.addEdge(b,d);
        graph.addEdge(c,g);
        graph.addEdge(d,e);
        graph.addEdge(d,h);
        graph.addEdge(d,f);
        graph.addEdge(h,f);

        assertEquals("[A, B, C, G, D, E, H, F]",graph.depthFirst(a).toString());
    }
}
